python manage.py shell
>>>from news.models import *

1 Создать двух пользователей с помощью метода User.objects.create_user('username').

>>>user = User.objects.create_user('Иванов Иван Иванович')
>>>user_x = User.objects.create_user('Александр Александрович Александров')

2 Создать два объекта модели Author, связанные с пользователями.

>>>Author.objects.create(user=user)
>>>Author.objects.create(user=user_x)

3 Добавить 4 категории в модель Category.

>>>Category.objects.create(name_category = 'Спорт')
>>>Category.objects.create(name_category = 'Экономика')
>>>Category.objects.create(name_category = 'Наука')
>>>Category.objects.create(name_category = 'Отдых')

4 Добавить 2 статьи и 1 новость.

>>>post = Author.objects.get(pk=1)
>>>Post.objects.create(author=post, choice_title='NE', text='Бывший игрок', zagolovok='ТОП-НОВОСТИ')
>>>post1 = Author.objects.get(pk=2)
>>>Post.objects.create(author=post, choice_title='NE', text='Чемпион UFC', zagolovok='ТОП-НОВОСТИ')

>>>post = Author.objects.get(pk=1)
>>>Post.objects.create(author=post, choice_title='NE', text='Бывший игрок', zagolovok='ТОП-НОВОСТИ') 

5 Присвоить им категории как минимум в одной статье/новости должно быть не меньше 2 категорий.

>>>post = Post.objects.get(pk=4)
>>>category = Category.objects.get(pk=4)
>>>post.Category_post.add(category)

>>>post = Post.objects.get(pk=3)
>>>category = Category.objects.get(pk=3)
>>>post.Category_post.add(category)

>>>post1 = Post.objects.get(pk=1)
>>>post2 = Post.objects.get(pk=2)
>>>post3 = Post.objects.get(pk=3)


>>>category1 = Category.objects.get(pk=1)
>>>category2 = Category.objects.get(pk=2)


>>>post1.Category_post.add(category1)
>>>post1.Category_post.add(category2)


>>>post2.Category_post.add(category1)
>>>post2.Category_post.add(category2)


>>>post3.Category_post.add(category1)
>>>post3.Category_post.add(category2)

6 Создать как минимум 4 комментария к разным объектам модели Post в каждом объекте должен быть как минимум один комментарий.


>>>comments = Comment.objects.all().filter(post_id=best.id)
>>>com1 = Comment.objects.create(user_id=1, post_id=1, text_comment='Комент к спорту')
>>>com2 = Comment.objects.create(user_id=2, post_id=2, text_comment='Экономика это знания')
>>>com3 = Comment.objects.create(user_id=3, post_id=3, text_comment='Наука это будующие')
>>>com4 = Comment.objects.create(user_id=4, post_id=4, text_comment='Отдых это польза')

7 Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

>>>Post.objects.get(pk=1).like()
>>>Post.objects.get(pk=2).like()
>>>Post.objects.get(pk=3).like()
>>>Post.objects.get(pk=4).like()
>>>Post.objects.get(pk=1).dislike()
>>>Post.objects.get(pk=2).dislike()
>>>Post.objects.get(pk=3).dislike()
>>>Post.objects.get(pk=4).dislike()

8 Обновить рейтинги пользователей.

>>>auth_rating = Author.objects.get(pk=1)
>>>auth_rating.update_rating()
>>>auth_rating = Author.objects.get(pk=2)
>>>auth_rating.update_rating()

9 Вывести username и рейтинг лучшего пользователя применяя сортировку и возвращая поля первого объекта.

>>>Author.objects.order_by('rating_autor')

10 Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

>>>Post.objects.order_by('rating_post').values('author__name__username')

11 Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

>>>best = Post.objects.order_by('-rating_post').first()
best
>>>comments = Comment.objects.all().filter(post_id=best.id)
comments

for comment in comments:
    print(comment.time_in_comment)
    print(User.objects.get(id=comment.user_id))
    print(comment.rating_comment)
    print(comment.text_comment)